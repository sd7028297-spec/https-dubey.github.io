<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sticky Notes App</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .subtitle {
            color: #7f8c8d;
            font-size: 1.1rem;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        #addNote {
            background-color: #2ecc71;
            color: white;
        }

        #addNote:hover {
            background-color: #27ae60;
        }

        #clearAll {
            background-color: #e74c3c;
            color: white;
        }

        #clearAll:hover {
            background-color: #c0392b;
        }

        .color-picker {
            display: flex;
            gap: 5px;
            align-items: center;
        }

        .color-option {
            width: 25px;
            height: 25px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: transform 0.2s;
        }

        .color-option:hover {
            transform: scale(1.2);
        }

        .color-option.active {
            border-color: #2c3e50;
            transform: scale(1.2);
        }

        .notes-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            padding: 10px;
        }

        .note {
            min-height: 200px;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column;
            transition: transform 0.3s, box-shadow 0.3s;
            position: relative;
        }

        .note:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

        .note-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            padding-bottom: 8px;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
        }

        .note-date {
            font-size: 0.8rem;
            color: rgba(0, 0, 0, 0.6);
        }

        .note-actions {
            display: flex;
            gap: 5px;
        }

        .note-action {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            padding: 2px 5px;
            color: rgba(0, 0, 0, 0.6);
            transition: color 0.2s;
        }

        .note-action:hover {
            color: rgba(0, 0, 0, 0.9);
        }

        .note-content {
            flex: 1;
            padding: 5px;
            border: none;
            background: transparent;
            resize: none;
            outline: none;
            font-size: 0.95rem;
            line-height: 1.4;
        }

        .note-footer {
            display: flex;
            justify-content: flex-end;
            margin-top: 10px;
            font-size: 0.8rem;
            color: rgba(0, 0, 0, 0.5);
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            grid-column: 1 / -1;
        }

        .empty-state h3 {
            margin-bottom: 10px;
        }

        @media (max-width: 600px) {
            .notes-container {
                grid-template-columns: 1fr;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Sticky Notes</h1>
            <p class="subtitle">Organize your thoughts and tasks</p>
        </header>

        <div class="controls">
            <button id="addNote">Add New Note</button>
            <button id="clearAll">Clear All Notes</button>
            <div class="color-picker">
                <span>Note Color:</span>
                <div class="color-option active" style="background-color: #fef9a7;" data-color="#fef9a7"></div>
                <div class="color-option" style="background-color: #a7d7f9;" data-color="#a7d7f9"></div>
                <div class="color-option" style="background-color: #a7f9d7;" data-color="#a7f9d7"></div>
                <div class="color-option" style="background-color: #f9a7d7;" data-color="#f9a7d7"></div>
                <div class="color-option" style="background-color: #d7a7f9;" data-color="#d7a7f9"></div>
            </div>
        </div>

        <div class="notes-container" id="notesContainer">
            <!-- Notes will be added here dynamically -->
            <div class="empty-state" id="emptyState">
                <h3>No notes yet</h3>
                <p>Click "Add New Note" to create your first sticky note!</p>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Elements
            const notesContainer = document.getElementById('notesContainer');
            const addNoteBtn = document.getElementById('addNote');
            const clearAllBtn = document.getElementById('clearAll');
            const colorOptions = document.querySelectorAll('.color-option');
            const emptyState = document.getElementById('emptyState');
            
            // State
            let selectedColor = '#fef9a7';
            let notes = JSON.parse(localStorage.getItem('stickyNotes')) || [];
            
            // Initialize app
            renderNotes();
            updateEmptyState();
            
            // Event Listeners
            addNoteBtn.addEventListener('click', createNewNote);
            clearAllBtn.addEventListener('click', clearAllNotes);
            
            colorOptions.forEach(option => {
                option.addEventListener('click', function() {
                    // Update selected color
                    selectedColor = this.getAttribute('data-color');
                    
                    // Update active state
                    colorOptions.forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                });
            });
            
            // Functions
            function createNewNote() {
                const newNote = {
                    id: Date.now(),
                    content: '',
                    color: selectedColor,
                    date: new Date().toLocaleDateString('en-US', { 
                        month: 'short', 
                        day: 'numeric',
                        year: 'numeric'
                    }),
                    lastEdited: new Date().toISOString()
                };
                
                notes.push(newNote);
                saveNotes();
                renderNotes();
                updateEmptyState();
                
                // Focus on the new note's textarea
                const newNoteElement = document.querySelector(`[data-id="${newNote.id}"] .note-content`);
                newNoteElement.focus();
            }
            
            function renderNotes() {
                // Sort notes by last edited (newest first)
                notes.sort((a, b) => new Date(b.lastEdited) - new Date(a.lastEdited));
                
                notesContainer.innerHTML = '';
                
                notes.forEach(note => {
                    const noteElement = document.createElement('div');
                    noteElement.className = 'note';
                    noteElement.style.backgroundColor = note.color;
                    noteElement.setAttribute('data-id', note.id);
                    
                    noteElement.innerHTML = `
                        <div class="note-header">
                            <div class="note-date">${note.date}</div>
                            <div class="note-actions">
                                <button class="note-action delete-note" title="Delete note">üóëÔ∏è</button>
                            </div>
                        </div>
                        <textarea class="note-content" placeholder="Start typing...">${note.content}</textarea>
                        <div class="note-footer">
                            <span>Double-click to edit</span>
                        </div>
                    `;
                    
                    notesContainer.appendChild(noteElement);
                    
                    // Add event listeners for the new note
                    const deleteBtn = noteElement.querySelector('.delete-note');
                    const textarea = noteElement.querySelector('.note-content');
                    
                    deleteBtn.addEventListener('click', () => deleteNote(note.id));
                    textarea.addEventListener('input', () => updateNoteContent(note.id, textarea.value));
                    textarea.addEventListener('dblclick', function() {
                        this.focus();
                        this.selectionStart = this.value.length;
                    });
                });
                
                updateEmptyState();
            }
            
            function updateNoteContent(id, content) {
                const noteIndex = notes.findIndex(note => note.id === id);
                if (noteIndex !== -1) {
                    notes[noteIndex].content = content;
                    notes[noteIndex].lastEdited = new Date().toISOString();
                    saveNotes();
                }
            }
            
            function deleteNote(id) {
                if (confirm('Are you sure you want to delete this note?')) {
                    notes = notes.filter(note => note.id !== id);
                    saveNotes();
                    renderNotes();
                    updateEmptyState();
                }
            }
            
            function clearAllNotes() {
                if (notes.length === 0) return;
                
                if (confirm('Are you sure you want to delete all notes?')) {
                    notes = [];
                    saveNotes();
                    renderNotes();
                    updateEmptyState();
                }
            }
            
            function updateEmptyState() {
                if (notes.length === 0) {
                    emptyState.style.display = 'block';
                } else {
                    emptyState.style.display = 'none';
                }
            }
            
            function saveNotes() {
                localStorage.setItem('stickyNotes', JSON.stringify(notes));
            }
        });
    </script>
</body>
</html>
